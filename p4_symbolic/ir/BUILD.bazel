# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_proto_library")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("//p4_symbolic/ir:test.bzl", "ir_parsing_test")

cc_proto_library(
    name = "ir_cc_proto",
    visibility = ["//p4_symbolic:__subpackages__"],
    deps = [":ir_proto"],
)

proto_library(
    name = "ir_proto",
    srcs = ["ir.proto"],
    deps = [
        "//p4_symbolic/bmv2:bmv2_proto",
        "@p4_pdpi//p4_pdpi:ir_proto",
    ],
)

cc_library(
    name = "pdpi_driver",
    srcs = [
        "pdpi_driver.cc",
    ],
    hdrs = [
        "pdpi_driver.h",
    ],
    visibility = ["//p4_symbolic:__subpackages__"],
    deps = [
        "@com_google_absl//absl/status",
        "@p4_pdpi//gutil:proto",
        "@p4_pdpi//gutil:status",
        "@p4_pdpi//p4_pdpi:ir",
        "@p4_pdpi//p4_pdpi:ir_cc_proto",
    ],
)

cc_library(
    name = "table_entries",
    srcs = [
        "table_entries.cc",
    ],
    hdrs = [
        "table_entries.h",
    ],
    visibility = ["//p4_symbolic:__subpackages__"],
    deps = [
        ":ir_cc_proto",
        "//p4_symbolic/util",
        "@com_google_absl//absl/strings",
        "@p4_pdpi//gutil:status",
        "@p4_pdpi//p4_pdpi:ir_cc_proto",
    ],
)

cc_library(
    name = "ir",
    srcs = [
        "ir.cc",
    ],
    hdrs = [
        "ir.h",
    ],
    visibility = ["//p4_symbolic:__subpackages__"],
    deps = [
        ":ir_cc_proto",
        ":table_entries",
        "//p4_symbolic/bmv2:bmv2_cc_proto",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf_headers",
        "@p4_pdpi//gutil:status",
        "@p4_pdpi//p4_pdpi:ir_cc_proto",
    ],
)

cc_binary(
    name = "test",
    srcs = [
        "test.cc",
    ],
    deps = [
        "//p4_symbolic:parser",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@p4_pdpi//gutil:status",
    ],
)

# Golden file testing rules to test p4_symbolic/ir/ir.cc.
ir_parsing_test(
    name = "port_table_test",
    golden_file = "expected/table.txt",
    p4_program = "//p4-samples:port-table/table.p4",
    table_entries = "//p4-samples:port-table/entries.txt",
)
