// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The main protobuf file for definition of our intermediate representation.
// This file defines the overall structure of a P4 program in our IR.
// The structure is tailored to be easy to consume rather than produce.
// It deviates from the underlying bmv2 JSON format, which is mimiced closely
// by p4_symbolic/bmv2/bmv2.proto.
// The bmv2 proto is used to initially parse the JSON format, which is then
// processed by our tool and transformed into the IR.
// The IR does not cover all the features of P4 programs.
// Specifically, we intentionally ignore parsers, de-parsers, stacks and unions,
// checksum calculations, and extern definitions.
// Additionally, some types of expressions and statements are unsupported, these
// are described in values.proto and statements.proto respectively.

syntax = "proto3";

package p4_symbolic.ir;

import "p4_pdpi/ir.proto";
import "p4_symbolic/bmv2/bmv2.proto";
import "p4_symbolic/ir/statements.proto";

// Overall structure of a p4 program.
message P4Program {
  // Header definitions, keyed by the header type name (e.g. standard_metadata).
  map<string, HeaderType> headers = 1;
  // Action definitions and implementations, keyed by action name.
  map<string, Action> actions = 2;
  // Table definitions and implementations, keyed by table name.
  map<string, Table> tables = 3;
  // The name of the initial table.
  string initial_table = 6;
  // TODO(babman): Parsers, De-parsers, and pipelines are ignored for now.
  // map<string, p4_symbolic.bmv2.Parser> parsers = 7;
  // map<string, p4_symbolic.bmv2.Deparser> deparsers = 8;
  // map<string, p4_symbolic.bmv2.Pipeline> pipelines = 9;
  // string initial_pipeline = 10;
}

// A header definition. Includes the programmer assigned name,
// the header id, and the fields in the heade.
message HeaderType {
  string name = 1;
  int32 id = 2;
  // Maps a field name to its definition.
  map<string, HeaderField> fields = 3;
}

// A P4 header type definition.
// Includes its name, bitwidth (type), and validity flag (initially false),
// and the enclosing header type name that defines this field.
message HeaderField {
  string name = 1;
  int32 bitwidth = 2;
  bool valid = 3;
  string header_type = 4;
}

// Overall action structure, combining definition with implementation.
message Action {
  // This contains the name, id, and parameters, among other things.
  // Essentially, this is the action signature.
  pdpi.ir.IrActionDefinition action_definition = 1;
  // Action implementation, essentially its body.
  ActionImplementation action_implementation = 2;
}

// Action implementation details.
message ActionImplementation {
  // Action body.
  repeated Statement action_body = 1;
}

// Overall table structure, combining definition with implementation.
message Table {
  // This contains the name, id, action list, field matches, and max size.
  pdpi.ir.IrTableDefinition table_definition = 1;
  // This contains table implementation details.
  TableImplementation table_implementation = 2;
}

// Table implementation details that are not exposed in the definition.
message TableImplementation {
  // The overal type of the match(s) of the table.
  // This is the most general match type of all the matches
  // See https://github.com/p4lang/p4-spec/issues/411
  p4_symbolic.bmv2.TableMatchTypeEnum match_type = 5;
  // Table type with respect to action selection.
  p4_symbolic.bmv2.TableTypeEnum type = 6;
  // TODO(babman): later support "default entry", and "next_tables".
  // TODO(babman): support "action_profile" for table with an "indirect"
  //               or "indirect_ws" type.
}
