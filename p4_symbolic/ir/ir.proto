// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file defines the overall structure of a P4 program in our IR, as well
// as the supported statements and expressions.
// The structure is tailored to be easy to consume rather than produce.
// It deviates from the underlying bmv2 JSON format, which is mimiced closely
// by p4_symbolic/bmv2/bmv2.proto.
// The bmv2 proto is used to initially parse the JSON format, which is then
// processed by our tool and transformed into the IR.
// The IR does not cover all the features of P4 programs.
// Specifically, we intentionally ignore parsers, de-parsers, stacks and unions,
// checksum calculations, and extern definitions.
// Additionally, some types of expressions and statements are unsupported, these
// are described in the relevant sections of this file.
// See the bmv2 JSON format reference for more information:
// https://github.com/p4lang/behavioral-model/blob/master/docs/JSON_format.md

syntax = "proto3";

package p4_symbolic.ir;

import "p4_pdpi/ir.proto";
import "p4_symbolic/bmv2/bmv2.proto";

// Overall structure of a p4 program.
message P4Program {
  // Header definitions, keyed by the header type name (e.g. standard_metadata).
  map<string, HeaderType> headers = 1;
  // Action definitions and implementations, keyed by action name.
  map<string, Action> actions = 2;
  // Table definitions and implementations, keyed by table name.
  map<string, Table> tables = 3;
  // The name of the initial table.
  string initial_table = 6;
  // Parsers, De-parsers, and pipelines are ignored for now.
  // map<string, p4_symbolic.bmv2.Parser> parsers = 7;
  // map<string, p4_symbolic.bmv2.Deparser> deparsers = 8;
  // map<string, p4_symbolic.bmv2.Pipeline> pipelines = 9;
  // string initial_pipeline = 10;
}

// A header definition. Includes the programmer assigned name,
// the header id, and the fields in the heade.
message HeaderType {
  string name = 1;
  int32 id = 2;
  // Maps a field name to its definition.
  map<string, HeaderField> fields = 3;
}

// A P4 header type definition.
// Includes its name, bitwidth (type), and validity flag (initially false),
// and the enclosing header type name that defines this field.
message HeaderField {
  string name = 1;
  int32 bitwidth = 2;
  bool valid = 3;
  string header_type = 4;
}

// Overall action structure, combining definition with implementation.
message Action {
  // This contains the name, id, and parameters, among other things.
  // Essentially, this is the action signature.
  pdpi.ir.IrActionDefinition action_definition = 1;
  // Action implementation, essentially its body.
  ActionImplementation action_implementation = 2;
}

// Action implementation details.
message ActionImplementation {
  // Action body.
  repeated Statement action_body = 1;
}

// Overall table structure, combining definition with implementation.
message Table {
  // This contains the name, id, action list, field matches, and max size.
  pdpi.ir.IrTableDefinition table_definition = 1;
  // This contains table implementation details.
  TableImplementation table_implementation = 2;
}

// Table implementation details that are not exposed in the definition.
message TableImplementation {
  // The overal type of the match(s) of the table.
  // This is the most general match type of all the matches
  // See https://github.com/p4lang/p4-spec/issues/411
  p4_symbolic.bmv2.TableMatchTypeEnum match_type = 5;
  // Table type with respect to action selection.
  p4_symbolic.bmv2.TableTypeEnum type = 6;
  // Later support "default entry", and "next_tables".
  // later support "action_profile" for table with an "indirect"
  // or "indirect_ws" type.
}

// Valid op for statements within an action.
// These are used within the body (primitives) of an action, as top
// level statements. They cannot be used as sub-expressions.
enum StatementOpEnum {
  statement_op_assign = 0;
  // Assignment to a variable length field.
  // statement_op_assign_VL = 1;

  // Assignment to a header field.
  // statement_op_assign_headers = 2;

  // Assignment to a union, header stack, or a union stack respectively.
  // statement_op_assign_union = 3;
  // statement_op_assign_header_stack = 4;
  // statement_op_assign_union_stack = 5;

  // Header stack manipulation.
  // statement_op_push = 6;
  // statement_op_pop = 7;

  // Jumps to an offset within the enclosing action.
  // statement_op__jump = 8;
  // statement_op__jump_if_zero = 9;

  // These might be a useful way to communicate things from the user
  // into our tool and the resulting SMT program.
  // See https://github.com/p4lang/p4c/issues/1548
  // statement_op_assume = 10;  // Can be assumed as correct.
  // statement_op_assert = 11;  // Must be verified as correct.

  // Logging user-defined messages (to the console).
  // statement_op_log_msg = 12;
}

// An abstract p4 statement corresponding to a top level operation within
// an action body.
message Statement {
  StatementOpEnum op = 1;
  p4_symbolic.bmv2.SourceLocation source_info = 2;
  // Various statement concrete types.
  oneof statement {
    AssignmentStatement assignment_statement = 3;
  }
}

// An assignment statement of the form <left> = <right>.
// Note that left can be an rvalue expression.
message AssignmentStatement {
  LValue left = 1;
  RValue right = 2;
}

// The valid operations making up an RValue.
enum RValueOpEnum {
  rvalue_op_field = 0;
  rvalue_op_hexstr = 1;
  rvalue_op_bool_ = 2;
  rvalue_op_string_ = 3;
  rvalue_op_variable = 4;
  rvalue_op_expression = 5;
}

// The valid operations making up an LValue.
enum LValueOpEnum {
  lvalue_op_field = 0;
  lvalue_op_variable = 1;
  lvalue_op_expression = 2;
}

// The structure of an abstract RValue.
message RValue {
  RValueOpEnum op = 1;
  oneof rvalue {
    FieldValue field_value = 2;
    HexstrValue hexstr_value = 3;
    BoolValue bool_value = 4;
    StringValue string_value = 5;
    Variable variable = 6;
    RExpression expression = 7;
  }
}

// The structure of an abstract LValue.
message LValue {
  LValueOpEnum op = 1;
  oneof lvalue {
    FieldValue field_value = 2;
    Variable variable = 3;
    // Unsupported
    // LExpression expression = 4;
  }
}

// A header field accessed statically.
// Field access that is dynamic (either in the index/offset or in the header
// object) is defined under AccessExpression below.
message FieldValue {
  string header_name = 1;
  string field_name = 2;
}

// Corresponds to a hex bigendiean encoding of a bit-string.
// In the bmv2 JSON format. The hexstring can be prefixed by "-"
// for negative values.
// We remove any such prefix and explicitly set the negative flag.
message HexstrValue {
  string value = 1;
  bool negative = 2;
}

// A boolean literal value.
message BoolValue {
  bool value = 1;
}

// A string literal value.
message StringValue {
  string value = 1;
}

// Our explicit representation of a runtime variable.
// The bmv2 JSON format represents variables as indices
// to a runtime_data array in the enclosing scope, which
// contains the variable name.
// We directly refer to variables by their name.
message Variable {
  string name = 1;
}

// Possible rexpressions.
enum RExpressionOpEnum {
  rexpression_op_simple_binary = 0;
  rexpression_op_simple_unary = 1;
  rexpression_op_ternary = 2;
  // Unsupported
  // rexpression_op_conversion = 3;
  // rexpression_op_stack = 4;
  // rexpression_op_access = 5;
}

// An abstract RExpression.
message RExpression {
  RExpressionOpEnum op = 1;
  oneof expression {
    BinaryExpression simple_binary_expression = 2;
    UnaryExpression simple_unary_expression = 3;
    TernaryExpression ternary_expression = 4;
    // Unsupported
    // ConversionExpression conversion_expression = 5;
    // StackExpression stack_expression = 6;
    // AccessExpression access_expression = 7;
  }
}

// Supported basic binary expressions.
enum BinaryExpressionOpEnum {
  plus = 0;
  minus = 1;
  times = 3;
  left_shift = 4;   // <<
  right_shift = 5;  // >>
  equals = 6;       // ==
  not_equals = 7;
  greater = 8;
  greater_equals = 9;
  less = 10;
  less_equals = 11;
  and = 12;
  or = 13;
  bit_and = 14;  // &
  bit_or = 15;
  bit_xor = 16;
  // Unsupported
  // two_comp_mod = 17; // 2's complement modulo.
}

// Arithmetic, relational, and boolean binary operations.
message BinaryExpression {
  BinaryExpressionOpEnum op = 1;
  RExpression left = 2;
  RExpression right = 3;
}

// Supported basic unary expressions.
enum UnaryExpressionOpEnum {
  not = 0;      // boolean not.
  bit_neg = 1;  // ~ (bitwise negation).
  // Unsupported
  // valid = 2;
  // valid_union = 3;
}

// Arithmetic and boolean unary operations.
message UnaryExpression {
  UnaryExpressionOpEnum op = 1;
  RExpression operand = 2;
}

// Ternary condition on the form <condition> ? <left> : <right>.
message TernaryExpression {
  RExpression condition = 1;
  RExpression left = 2;
  RExpression right = 3;
}

// Unsupported
//// Possible lexpressions.
// enum LExpressionOpEnum {
//  // Only includes (dynamic) access expressions for now.
//  lexpression_op_access = 0;
//}

//// An abstract LExpression.
// message LExpression {
//  LExpressionOpEnum op = 1;
//  oneof expression {
//    AccessExpression access_expression = 2;
//  }
//}

//// Conversions and casts between data types.
// message ConversionExpression {
//  // One of: "d2b" (data-2-bool), "b2d" (bool-to-data)", "sat_cast"
//  // (saturating cast for signed integers), "unsat_cast" (saturating
//  // cast for unsigned integers).
//  string op = 1;
//  RExpression operand = 2;
//}

//// Unary expressions on stacks (size and indicies).
// message StackExpression {
//  // One of "last_stack_index" or "size_stack", which
//  // give the last valid index and the size of a stack.
//  string op = 1;
//  RExpression stack = 2;
//}

//// Dynamic access expressions.
//// The access may be dynamic in the index. For example, when the index is an
//// arithmetic expression.
//// The access may also be dynamic in the accessor, i.e. the header
//// or stack being accessed is determined at runtime by a dynamic expression.
// message AccessExpression {
//  // Type of access.
//  // One of:
//  //   "dereference_header_stack": access a header_stack at an index.
//  //   "access_field": access a dynamically specified header at an offset.
//  //   "dereference_union_stack": access a header_union_stack at an index.
//  //   "access_union_header": access a dynamically specified a header_union at
//  //                          an offset.
//  string op = 1;
//  RExpression accessor = 2;
//  RExpression index = 3;
//}
