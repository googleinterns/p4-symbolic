// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file defines the structure of an abstract statement, and
// the various concrete statements currently supported.

syntax = "proto3";

package p4_symbolic.ir;

import "p4_symbolic/bmv2/bmv2.proto";
import "p4_symbolic/ir/values.proto";

// Valid op for statements within an action.
// These are used within the body (primitives) of an action, as top
// level statements. They cannot be used as sub-expressions.
enum StatementOpEnum {
  statement_op_assign = 0;
  // TODO(babman): This is a comprehensive list of all operations, most
  //               are not supported by our implementation.

  // Assignment to a variable length field.
  // statement_op_assign_VL = 1;

  // Assignment to a header field.
  // statement_op_assign_headers = 2;

  // Assignment to a union, header stack, or a union stack respectively.
  // statement_op_assign_union = 3;
  // statement_op_assign_header_stack = 4;
  // statement_op_assign_union_stack = 5;

  // Header stack manipulation.
  // statement_op_push = 6;
  // statement_op_pop = 7;

  // Jumps to an offset within the enclosing action.
  // statement_op__jump = 8;
  // statement_op__jump_if_zero = 9;

  // These might be a useful way to communicate things from the user
  // into our tool and the resulting SMT program.
  // See https://github.com/p4lang/p4c/issues/1548
  // statement_op_assume = 10;  // Can be assumed as correct.
  // statement_op_assert = 11;  // Must be verified as correct.

  // Logging user-defined messages (to the console).
  // statement_op_log_msg = 12;
}

// An abstract p4 statement corresponding to a top level operation within
// an action body.
message Statement {
  StatementOpEnum op = 1;
  p4_symbolic.bmv2.SourceLocation source_info = 2;
  // Various statement concrete types.
  oneof statement {
    AssignmentStatement assignment_statement = 3;
  }
}

// An assignment statement of the form <left> = <right>.
// Note that left can be an rvalue expression.
// https://github.com/p4lang/behavioral-model/blob/master/docs/JSON_format.md
message AssignmentStatement {
  LValue left = 1;
  RValue right = 2;
}
