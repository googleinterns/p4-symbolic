# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:defs.bzl", "cc_library")
load("//p4_symbolic/symbolic:test.bzl", "end_to_end_test")

cc_library(
    name = "symbolic",
    srcs = [
        "action.cc",
        "conditional.cc",
        "control.cc",
        "guarded_map.cc",
        "operators.cc",
        "packet.cc",
        "parser.cc",
        "symbolic.cc",
        "table.cc",
        "util.cc",
    ],
    hdrs = [
        "action.h",
        "conditional.h",
        "control.h",
        "guarded_map.h",
        "operators.h",
        "packet.h",
        "parser.h",
        "symbolic.h",
        "table.h",
        "util.h",
    ],
    visibility = ["//p4_symbolic:__subpackages__"],
    deps = [
        "//p4_symbolic/ir:ir_cc_proto",
        "//p4_symbolic/ir:table_entries",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf_headers",
        "@p4_pdpi//gutil:status",
        "@p4_pdpi//p4_pdpi:ir_cc_proto",
        "@p4_pdpi//p4_pdpi/utils:ir",
    ],
)

# Golden file testing rules to test p4_symbolic/main.cc and the SMT
# program generated by p4_symbolic/symbolic/symbolic.cc.
end_to_end_test(
    name = "port_table_test",
    output_golden_file = "expected/table.txt",
    p4_program = "//p4-samples:port-table/table.p4",
    smt_golden_file = "expected/table.smt2",
    table_entries = "//p4-samples:port-table/entries.pb.txt",
)

end_to_end_test(
    name = "port_hardcoded_test",
    output_golden_file = "expected/hardcoded.txt",
    p4_program = "//p4-samples:hardcoded/hardcoded.p4",
    smt_golden_file = "expected/hardcoded.smt2",
)

end_to_end_test(
    name = "reflector_test",
    output_golden_file = "expected/reflector.txt",
    p4_program = "//p4-samples:reflector/reflector.p4",
    smt_golden_file = "expected/reflector.smt2",
)

end_to_end_test(
    name = "ipv4_routing_test",
    output_golden_file = "expected/basic.txt",
    p4_program = "//p4-samples:ipv4-routing/basic.p4",
    smt_golden_file = "expected/basic.smt2",
    table_entries = "//p4-samples:ipv4-routing/entries.pb.txt",
)
