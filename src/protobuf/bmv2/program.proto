// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file defines the overall bmv2 json representation of a P4 program.

syntax = "proto3";

package p4_symbolic.bmv2_json;

import "src/protobuf/bmv2/header.proto";
import "src/protobuf/bmv2/parser.proto";
import "src/protobuf/bmv2/table.proto";

// Specifies the overal structure of a p4 program json
// file outputed by p4c with a bmv2 target.
// Several fields may not be present in this specification
// because they are irrelevant to our tool.
// Furthermore, certain parts of the json program
// are extermely flexible or generic. These are hard
// to model accurately via protobuf.
// We use unconstrained protobuf constructs (e.g. Struct)
// to initially parse such fields when the entire program is parsed.
// Then, our c++ traversal code dynamically discovers the type
// of these constructs, and parses them into the appropriate
// constrained protobuf definitions.
// For example, expressions in P4 look very different according
// to their type. They may have a different set of fields,
// and may assign different type to the same field.
message P4Program {
  // Defined header types (e.g. ipv4 headers).
  // This includes built-in header types imported
  // into the program (e.g. v1model).
  repeated HeaderType header_types = 1;
  // The packet overall header, usually defined
  // as a collection of the above header type.
  repeated Header headers = 2;
  // All parsers defined in the program.
  repeated Parser parsers = 3;
  // All de-parsers defined in the program.
  repeated Deparser deparsers = 4;
  // All actions defined in the program, including their names
  // paramters, and bodies.
  // Eventhough actions are typically attached to tables,
  // they are defined seperatly in the JSON format,
  // and the table definitions refer to them by their action id.
  repeated Action actions = 5;
  // All pipelines (e.g. control constructs) defined in the program,
  // including all their tables, and the mapping of tables
  // to actions via match keys.
  repeated Pipeline pipelines = 6;
}
