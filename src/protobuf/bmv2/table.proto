// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file provides protobuf definitions for P4 processing pipelines,
// and their tables and associated actions.

syntax = "proto3";

package p4_symbolic.bmv2_json;

import "google/protobuf/struct.proto";

import "src/protobuf/bmv2/primitives.proto";

// A pipeline is a sequence of actions and table applications
// defined within the scope of one "control" construct.
// Usually, there are two pipelines in a p4 program;
// one for ingress and one for egress.
message Pipeline {
  // The name assigned by programmer.
  // e.g. MyIngressPipeline.
  string name = 1;
  // The pipeline ID.
  int32 id = 2;
  // Source information about where the pipeline is defined.
  SourceLocation source_info = 3;
  // The first table matched on in this pipeline.
  string init_table = 4;
  // All the tables and their actions that are part of this pipeline.
  repeated Table tables = 5;
  // TODO(babman): action_profiles
  // TODO(babman): conditionals
}

// A control plane table definition including its keys and actions.
message Table {
  // The table name assigned by programmer.
  // This might be a fully qualitifed name e.g. MyIngressPipeline.MyTable,
  // or the name assigned via @name annotations.
  string name = 1;
  // The table id matching its id in p4info and p4rt.
  int32 id = 2;
  // Source information about where the table is defined.
  SourceLocation source_info = 3;
  // An array of keys that are used for matching on this table.
  repeated TableKey key = 4;
  // The overal type of the match(s) of the table.
  // In case the table have several keys with different match type,
  // the overall match type of the table would be the most general.
  // There is always a most general match because of P4 restrications
  // on match combination (which may be under-documented).
  // See https://github.com/p4lang/p4-spec/issues/411
  string match_type = 5;  // TODO(babman): make into an enum
  // This seems to be the "type of the table",
  // in all sample programs it is value is "simple".
  // TODO(babman): investigate what simple means and what other options exist.
  string type = 6;
  // The maximum size of the table (in number of entries).
  int32 max_size = 7;
  // Actions and action_ids are index matching arrays
  // that contain the name and the id of each action.
  repeated int32 action_ids = 8;
  repeated string actions = 9;
  // TODO(babman): next_tables
  // TODO(babman): default_entry
}

// A table key represents an input-matching column
// with an id, a match type, and a packet attribute/value matched on.
message TableKey {
  // The kind of match applied by this key when the table
  // is applied to a packet.
  // This can be 'exact', 'lpm', 'ternary'.
  string match_type = 1;  // TODO(babman): make into an enum (same as in Table).
  // This is essentially a string representation of the target.
  // e.g. standard_metadata.ingress_port.
  string name = 2;
  // A hex-value mask applied in ternary matches.
  // This field is set to null ("" when parsed with protobuf) if this is not a
  // ternary match.
  string mask = 3;
  // The attribute being matched.
  // e.g. ["standard_metadata", "ingress_port"]
  repeated string target = 4;
}

// An action that can be taken when a table is matched on.
message Action {
  // The name assigned by programmer.
  // This can be a fully qualified name e.g. MyIngressPipeline.set_egress_spec,
  // or can be set directly via @name annotations.
  string name = 1;
  // The id of the action, matching its p4rt id.
  int32 id = 2;
  // An array containing all variables defined within this action,
  // including its formal parameters.
  repeated VariableDefinition runtime_data = 3;
  // An array of statements within the action body.
  // A statement that uses a variable/parameter in the p4 program
  // is expressed here using the index of that variable in the above
  // "runtime_data" array (not its name).
  repeated google.protobuf.Struct primitives = 4;
}
