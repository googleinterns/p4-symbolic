syntax = "proto3";

import "google/protobuf/struct.proto";

import "src/protobuf/bmv2/primitives.proto";

// A pipeline is a sequence of actions and table applications
// defined within the scope of one "control" construct
// usually there are two pipelines in a p4 program
// one for ingress and one for egress
message Pipeline {
  // name assigned by programmer
  // e.g. MyIngressPipeline
  string name = 1;
  // Auto-generated id
  int32 id = 2;
  // Source information about where the pipeline is defined
  SourceInfo source_info = 3;
  // The first table matched on
  string init_table = 4;
  // All the tables and their actions that are part of this pipeline
  repeated Table tables = 5;
  // TODO(babman): action_profiles
  // TODO(babman): conditionals
}

// A control plane table definition
// including its keys and actions
message Table {
  // Full qualified name assigned by programmer
  // e.g. MyIngressPipeline.MyTable
  string name = 1;
  // Auto-generated id
  int32 id = 2;
  // Source information about where the table is defined
  SourceInfo source_info = 3;
  // An array of keys that are used for matching on this table
  repeated TableKey key = 4;
  // The overal type of the match(s) of the table
  // in case the table have several keys with different match type
  // the overall match type of the table would be the most general
  // there is always a most general match because of P4 restrications
  // on match combination (which may be under-documented)
  // https://github.com/p4lang/p4-spec/issues/411
  string match_type = 5;  // TODO(babman): make into an enum
  // This seems to be the "type of the table"
  // in all sample programs it is value is "simple"
  // TODO(babman): investigate what simple means and what other options exist
  string type = 6;
  // The maximum size of the table (in number of entries)
  int32 max_size = 7;
  // Actions and action_ids are index matching arrays
  // that contain the name and the id of each action
  repeated int32 action_ids = 8;
  repeated string actions = 9;
  // TODO(babman): next_tables
  // TODO(babman): default_entry
}

// A table key represents an input-matching column
// with an id, a match type, and a packet attribute/value matched on
message TableKey {
  // The kind of match applied by this key when the table
  // is applied to a packet
  // can be 'exact', 'lpm', 'ternary'
  string match_type = 1;  // TODO(babman): make into an enum (same as in Table)
  // This is essentially a string representation of the target
  // e.g. standard_metadata.ingress_port
  string name = 2;
  // The mask applied in ternary matches, a hex value
  // null if this is not a ternary match
  string mask = 3;
  // The attribute being matched
  // e.g. ["standard_metadata", "ingress_port"]
  repeated string target = 4;
}

// An action that can be taken when a table is matched on
message Action {
  // Full qualified name assigned by programmer
  // e.g. MyIngressPipeline.set_egress_spec
  string name = 1;
  // Auto-generated id
  int32 id = 2;
  // An array containing all variables defined within this action
  // including its formal parameters
  repeated RuntimeData runtime_data = 3;
  // An array of statements within the action body
  // A statement that uses a variable/parameter in the p4 program
  // is expressed here using the index of that variable in the above
  // "runtime_data" array (not its name)
  repeated google.protobuf.Struct primitives = 4;  
}
